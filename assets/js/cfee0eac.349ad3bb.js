"use strict";(self.webpackChunkmodelica_buildings_templates=self.webpackChunkmodelica_buildings_templates||[]).push([[379],{5680:(e,a,n)=>{n.d(a,{xA:()=>m,yg:()=>c});var t=n(6540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=t.createContext({}),s=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},m=function(e){var a=s(e.components);return t.createElement(p.Provider,{value:a},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),y=s(n),d=l,c=y["".concat(p,".").concat(d)]||y[d]||g[d]||r;return n?t.createElement(c,i(i({ref:a},m),{},{components:n})):t.createElement(c,i({ref:a},m))}));function c(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var p in a)hasOwnProperty.call(a,p)&&(o[p]=a[p]);o.originalType=e,o[y]="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5851:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var t=n(8168),l=(n(6540),n(5680));const r={sidebar_position:2},i="Nomenclature",o={unversionedId:"more/nomenclature",id:"more/nomenclature",title:"Nomenclature",description:"This section provides conventions mainly for variable naming, marginally for component naming.",source:"@site/docs/more/nomenclature.md",sourceDirName:"more",slug:"/more/nomenclature",permalink:"/modelica-buildings-templates/more/nomenclature",draft:!1,tags:[],version:"current",lastUpdatedBy:"AntoineGautier",lastUpdatedAt:1718979942,formattedLastUpdatedAt:"Jun 21, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Glossary",permalink:"/modelica-buildings-templates/more/glossary"},next:{title:"References",permalink:"/modelica-buildings-templates/more/references"}},p={},s=[{value:"Example of Control Point Naming",id:"example-of-control-point-naming",level:2},{value:"Control Points",id:"control-points",level:2},{value:"Order of Morphemes",id:"order-of-morphemes",level:2},{value:"Do we allow 3-letter capital names such as CHW?",id:"do-we-allow-3-letter-capital-names-such-as-chw",level:2},{value:"Fixed Position or Non-abbreviated Forms",id:"fixed-position-or-non-abbreviated-forms",level:2},{value:"Reserved",id:"reserved",level:2},{value:"Physical Quantities",id:"physical-quantities",level:3},{value:"Various",id:"various",level:3},{value:"Legacy Exceptions",id:"legacy-exceptions",level:2}],m={toc:s},y="wrapper";function g(e){let{components:a,...r}=e;return(0,l.yg)(y,(0,t.A)({},m,r,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"nomenclature"},"Nomenclature"),(0,l.yg)("p",null,"This section provides conventions mainly for variable naming, marginally for component naming."),(0,l.yg)("h2",{id:"example-of-control-point-naming"},"Example of Control Point Naming"),(0,l.yg)("p",null,"By way of introduction, here is an example of how the following rules translate into practical nomenclature for the CHW plant template."),(0,l.yg)("iframe",{src:"https://docs.google.com/document/d/1LeutsY9__ClaIEjmvRHkIAMGX5dlW0Xo1BFGvJTHjs4/preview",frameborder:"0",allowfullscreen:!0,width:"100%",height:"500"}),(0,l.yg)("h2",{id:"control-points"},"Control Points"),(0,l.yg)("p",null,"Damper and valve models"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"take",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"y1")," (Boolean) if 2-position, XOR"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"y")," (real, fractional) if modulating"))),(0,l.yg)("li",{parentName:"ul"},"return",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"y_actual")," (real, fractional) for the position feedback (modulating), XOR"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"y1_actual")," (Boolean, open end switch status) and ",(0,l.yg)("inlineCode",{parentName:"li"},"y0_actual")," (Boolean, closed end switch status)")))),(0,l.yg)("p",null,"Fan and pump models"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"take",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"y1")," for the On/Off command (Boolean, used for constant speed motor starter, and variable speed VFD Run signal), AND"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"y")," (optional) for the commanded speed (real fractional or integer, used for variable speed or 2-stage fan motor)"))),(0,l.yg)("li",{parentName:"ul"},"return ",(0,l.yg)("inlineCode",{parentName:"li"},"y1_actual")," (Boolean, status)")),(0,l.yg)("p",null,"(See also ",(0,l.yg)("a",{parentName:"p",href:"/modelica-buildings-templates/more/glossary#command"},"command in Glossary"),".)"),(0,l.yg)("details",null,(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},(0,l.yg)("em",{parentName:"strong"},"Still need to clarify"))," the use of ",(0,l.yg)("inlineCode",{parentName:"p"},"u")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"y")," in MBL."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Is it in reference to the control system (as I/O points) or in reference to the modeled component (either the process\u2014for a sensor\u2014or the controls)?"),(0,l.yg)("li",{parentName:"ul"},"Is it at all related to control theory as in the diagram below? Obviously not as we would then use ",(0,l.yg)("inlineCode",{parentName:"li"},"u")," for the controller ",(0,l.yg)("em",{parentName:"li"},"output")," and ",(0,l.yg)("inlineCode",{parentName:"li"},"e = ysp - y")," so something in the ",(0,l.yg)("inlineCode",{parentName:"li"},"y")," domain for the controller ",(0,l.yg)("em",{parentName:"li"},"input"),".")),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"control",src:n(3696).A,width:"1040",height:"372"}))),(0,l.yg)("h2",{id:"order-of-morphemes"},"Order of Morphemes"),(0,l.yg)("p",null,"In the CamelCase instance name:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"The first morpheme indicates what the instance represents."),(0,l.yg)("p",{parentName:"li"},"For example, a controller ",(0,l.yg)("inlineCode",{parentName:"p"},"ctl"),", a fan ",(0,l.yg)("inlineCode",{parentName:"p"},"fan"),", a coil ",(0,l.yg)("inlineCode",{parentName:"p"},"coi")),(0,l.yg)("details",null,(0,l.yg)("p",{parentName:"li"},"This is motivated by the naming of"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"quantity variables: we would not use ",(0,l.yg)("inlineCode",{parentName:"p"},"SupAirT")," for the supply air temperature, but rather ",(0,l.yg)("inlineCode",{parentName:"p"},"TAirSup"),",")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"physical connectors: see ",(0,l.yg)("inlineCode",{parentName:"p"},"port_a"),"."))))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"The suffixes stand for the attributes by order of importance."),(0,l.yg)("p",{parentName:"li"},"For example, ",(0,l.yg)("inlineCode",{parentName:"p"},"coiCoo")," for cooling coil, ",(0,l.yg)("inlineCode",{parentName:"p"},"fanSupDra")," for a supply fan in a draw-through configuration."),(0,l.yg)("p",{parentName:"li"},"For a quantity"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"the first suffix shall systematically describe the medium (",(0,l.yg)("inlineCode",{parentName:"p"},"ChiWat"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"Air"),", etc.),")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"the second suffix shall describe the origin of the medium (",(0,l.yg)("inlineCode",{parentName:"p"},"ChiWatSup"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"TAirSup"),", etc.)."),(0,l.yg)("p",{parentName:"li"},"Exceptions are only allowed if the quantity is a system characteristic for which there is no ambiguity, e.g., ",(0,l.yg)("inlineCode",{parentName:"p"},"dpDamOut_nominal")," for the OA damper pressure drop (we don\u2019t mention air) or ",(0,l.yg)("inlineCode",{parentName:"p"},"dpValCoiCoo")," for the cooling coil control valve (we don\u2019t mention CHW)."),(0,l.yg)("p",{parentName:"li"},"Similarly (exhaustive list):"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"TOut")," or ",(0,l.yg)("inlineCode",{parentName:"li"},"phiOut")," (air implied)"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"TZon")," (air implied)"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"pBui_rel")," (air implied)")))))),(0,l.yg)("p",null,"All CamelCase morphemes should be used before the first underscore","\u2014","such as in ",(0,l.yg)("inlineCode",{parentName:"p"},"mAirSup_flow_nominal"),"\u2014","with the exception of the physical connectors where we use ",(0,l.yg)("inlineCode",{parentName:"p"},"port_aChiWat"),"."),(0,l.yg)("h2",{id:"do-we-allow-3-letter-capital-names-such-as-chw"},"Do we allow 3-letter capital names such as CHW?"),(0,l.yg)("admonition",{title:"NO",type:"danger"},(0,l.yg)("p",{parentName:"admonition"},"3-letter capital abbreviations are only allowed","\u2014","and encouraged","\u2014","in documentation and description strings.")),(0,l.yg)("p",null,"For variable and instance names:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Rather use"),(0,l.yg)("th",{parentName:"tr",align:null},"Instead of"),(0,l.yg)("th",{parentName:"tr",align:null},"To designate"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"airHan (*)"),(0,l.yg)("td",{parentName:"tr",align:null},"AHU"),(0,l.yg)("td",{parentName:"tr",align:null},"Air handling unit")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"chiWat (*)"),(0,l.yg)("td",{parentName:"tr",align:null},"CHW"),(0,l.yg)("td",{parentName:"tr",align:null},"Chilled water")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"conWat (*)"),(0,l.yg)("td",{parentName:"tr",align:null},"CW"),(0,l.yg)("td",{parentName:"tr",align:null},"Condenser water")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"coo"),(0,l.yg)("td",{parentName:"tr",align:null},"CT"),(0,l.yg)("td",{parentName:"tr",align:null},"Cooling tower or dry cooler")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"eco (*)"),(0,l.yg)("td",{parentName:"tr",align:null},"WSE"),(0,l.yg)("td",{parentName:"tr",align:null},"Waterside economizer")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"heaWat (*)"),(0,l.yg)("td",{parentName:"tr",align:null},"HHW"),(0,l.yg)("td",{parentName:"tr",align:null},"Heating hot water")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"hex (*)"),(0,l.yg)("td",{parentName:"tr",align:null},"HX"),(0,l.yg)("td",{parentName:"tr",align:null},"Heat exchanger")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"hotWat (*)"),(0,l.yg)("td",{parentName:"tr",align:null},"DHW"),(0,l.yg)("td",{parentName:"tr",align:null},"Domestic hot water")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"hp"),(0,l.yg)("td",{parentName:"tr",align:null},"HP"),(0,l.yg)("td",{parentName:"tr",align:null},"Heat pump")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"hrc"),(0,l.yg)("td",{parentName:"tr",align:null},"HRC"),(0,l.yg)("td",{parentName:"tr",align:null},"Heat recovery chiller")))),(0,l.yg)("p",null,"(*) These abbreviations are being used by legacy. If we were to decide today, it would make more sense to rather use lower case abbreviations: chw, cw, hw, dhw, wse, hx, ahu.\nThis is more aligned with the considerations from ",(0,l.yg)("a",{parentName:"p",href:"https://stackoverflow.com/questions/15526107/acronyms-in-camelcase"},"https://stackoverflow.com/questions/15526107/acronyms-in-camelcase"),"."),(0,l.yg)("p",null,"Tolerated exceptions (by legacy again, today it would make more sense to use lower case abbreviations):"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"COP"),(0,l.yg)("li",{parentName:"ul"},"VAV"),(0,l.yg)("li",{parentName:"ul"},"PLR")),(0,l.yg)("h2",{id:"fixed-position-or-non-abbreviated-forms"},"Fixed Position or Non-abbreviated Forms"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"_nominal"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"_min"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"_max"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"_actual"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"_default")," always at the end"),(0,l.yg)("details",null,(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"min")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"max")," are attributes of primitive types in Modelica, same as ",(0,l.yg)("inlineCode",{parentName:"p"},"nominal"),", and should have the same notation, not Min and Max in CamelCase."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"For design conditions use ",(0,l.yg)("inlineCode",{parentName:"p"},"_nominal")," not ",(0,l.yg)("inlineCode",{parentName:"p"},"Des"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"_flow")," for rate per unit of time")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"have_"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"is_")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"use_")," for a structural parameter, always at the beginning"),(0,l.yg)("details",null,(0,l.yg)("p",{parentName:"li"},"Why not ",(0,l.yg)("inlineCode",{parentName:"p"},"has_"),"? Because \u201cDoes it have?\u201d, same for \u201cDoes it use?\u201d, but \u201cIs it?\u201d"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"_a")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"_b")," for inlet and outlet ports."))),(0,l.yg)("h2",{id:"reserved"},"Reserved"),(0,l.yg)("h3",{id:"physical-quantities"},"Physical Quantities"),(0,l.yg)("p",null,"Pressure:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"p")," is used for absolute pressure,"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"p_rel")," for relative pressure (duct static, building static, etc.),"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"dp")," for a pressure drop across an equipment or a circuit.")),(0,l.yg)("p",null,"Relative humidity: ",(0,l.yg)("inlineCode",{parentName:"p"},"phi")),(0,l.yg)("p",null,"From ",(0,l.yg)("a",{parentName:"p",href:"https://simulationresearch.lbl.gov/modelica/releases/v10.0.0/help/Buildings_UsersGuide.html#Buildings.UsersGuide.Conventions"},"Buildings.UsersGuide.Conventions"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Mass fraction"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Uppercase ",(0,l.yg)("inlineCode",{parentName:"li"},"X")," denotes mass fraction per total mass."),(0,l.yg)("li",{parentName:"ul"},"Lowercase ",(0,l.yg)("inlineCode",{parentName:"li"},"x")," denotes mass fraction per mass of dry air (absolute humidity)."))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"TWetBul")," for wet bulb"))),(0,l.yg)("admonition",{type:"tip"},(0,l.yg)("p",{parentName:"admonition"},"The naming conventions used for variables representing quantities (such as ",(0,l.yg)("inlineCode",{parentName:"p"},"T")," for temperature) should be used in component names (typically sensors) for the sake of concision."),(0,l.yg)("p",{parentName:"admonition"},"For example, a sensor for supply air temperature should be named ",(0,l.yg)("inlineCode",{parentName:"p"},"TAirSup")," instead of ",(0,l.yg)("inlineCode",{parentName:"p"},"senTemAirSup"),".")),(0,l.yg)("h3",{id:"various"},"Various"),(0,l.yg)("p",null,"We systematically use the parameter ",(0,l.yg)("inlineCode",{parentName:"p"},"cap*_nominal")," to specify a system capacity. Design engineers are used to provide an unsigned number (positive) for both the heating and cooling capacities. However, MBL users are rather accustomed to using ",(0,l.yg)("inlineCode",{parentName:"p"},"Q*_flow_nominal")," as a signed parameter. So, for consistency with MBL, each template must make a final assignment of ",(0,l.yg)("inlineCode",{parentName:"p"},"Q*_flow_nominal = +/- abs(cap*_nominal)")," so that this parameter be always available. Nevertheless, ",(0,l.yg)("inlineCode",{parentName:"p"},"cap*_nominal")," has no ",(0,l.yg)("inlineCode",{parentName:"p"},"min")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"max")," attribute so that the user can provide either a signed or an unsigned variable."),(0,l.yg)("details",null,(0,l.yg)("summary",null,"Example"),(0,l.yg)("p",null,"For example, a chiller template would have the following declarations."),(0,l.yg)("div",{className:"shiki-twoslash-fragment"},(0,l.yg)("pre",{parentName:"div",className:"shiki light-plus",style:{backgroundColor:"#FFFFFF",color:"#000000"}},(0,l.yg)("div",{parentName:"pre",className:"language-id"},"mo"),(0,l.yg)("div",{parentName:"pre",className:"code-container"},(0,l.yg)("code",{parentName:"div"},(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},"  "),(0,l.yg)("span",{parentName:"div",style:{color:"#0000FF"}},"parameter Modelica.Units.SI.HeatFlowRate"),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}}," cap_nominal  "),(0,l.yg)("span",{parentName:"div",style:{color:"#008000"}},"// No min and max attributes.")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},"    "),(0,l.yg)("span",{parentName:"div",style:{color:"#A31515"}},'"Design cooling capacity"'),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},";")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},"  "),(0,l.yg)("span",{parentName:"div",style:{color:"#0000FF"}},"final"),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}}," "),(0,l.yg)("span",{parentName:"div",style:{color:"#0000FF"}},"parameter Modelica.Units.SI.HeatFlowRate"),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}}," Q_flow_nominal("),(0,l.yg)("span",{parentName:"div",style:{color:"#0000FF"}},"final"),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}}," "),(0,l.yg)("span",{parentName:"div",style:{color:"#795E26"}},"max"),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},"="),(0,l.yg)("span",{parentName:"div",style:{color:"#098658"}},"0"),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},")=  "),(0,l.yg)("span",{parentName:"div",style:{color:"#008000"}},"// Final assignment that must be negative.")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},"    -"),(0,l.yg)("span",{parentName:"div",style:{color:"#795E26"}},"abs"),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},"(cap_nominal)")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},"    "),(0,l.yg)("span",{parentName:"div",style:{color:"#A31515"}},'"Design cooling heat flow rate"'),(0,l.yg)("span",{parentName:"div",style:{color:"#000000"}},";"))))),(0,l.yg)("pre",{parentName:"div",className:"shiki dark-plus",style:{backgroundColor:"#1E1E1E",color:"#D4D4D4"}},(0,l.yg)("div",{parentName:"pre",className:"language-id"},"mo"),(0,l.yg)("div",{parentName:"pre",className:"code-container"},(0,l.yg)("code",{parentName:"div"},(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},"  "),(0,l.yg)("span",{parentName:"div",style:{color:"#569CD6"}},"parameter Modelica.Units.SI.HeatFlowRate"),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}}," cap_nominal  "),(0,l.yg)("span",{parentName:"div",style:{color:"#6A9955"}},"// No min and max attributes.")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},"    "),(0,l.yg)("span",{parentName:"div",style:{color:"#CE9178"}},'"Design cooling capacity"'),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},";")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},"  "),(0,l.yg)("span",{parentName:"div",style:{color:"#569CD6"}},"final"),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}}," "),(0,l.yg)("span",{parentName:"div",style:{color:"#569CD6"}},"parameter Modelica.Units.SI.HeatFlowRate"),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}}," Q_flow_nominal("),(0,l.yg)("span",{parentName:"div",style:{color:"#569CD6"}},"final"),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}}," "),(0,l.yg)("span",{parentName:"div",style:{color:"#DCDCAA"}},"max"),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},"="),(0,l.yg)("span",{parentName:"div",style:{color:"#B5CEA8"}},"0"),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},")=  "),(0,l.yg)("span",{parentName:"div",style:{color:"#6A9955"}},"// Final assignment that must be negative.")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},"    -"),(0,l.yg)("span",{parentName:"div",style:{color:"#DCDCAA"}},"abs"),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},"(cap_nominal)")),(0,l.yg)("div",{parentName:"code",className:"line"},(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},"    "),(0,l.yg)("span",{parentName:"div",style:{color:"#CE9178"}},'"Design cooling heat flow rate"'),(0,l.yg)("span",{parentName:"div",style:{color:"#D4D4D4"}},";"))))))),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"Set")," for a set point, always as the last morpheme: so ",(0,l.yg)("inlineCode",{parentName:"p"},"TZonHeaOccSet")," not ",(0,l.yg)("inlineCode",{parentName:"p"},"TZonHeaSetOcc"),"."),(0,l.yg)("p",null,"The letter ",(0,l.yg)("inlineCode",{parentName:"p"},"n")," is used to represent a number of something (as opposed to ",(0,l.yg)("inlineCode",{parentName:"p"},"num"),")."),(0,l.yg)("p",null,"The letter ",(0,l.yg)("inlineCode",{parentName:"p"},"y")," is used to represent a fractional quantity (speed, opening, load) taking ",(0,l.yg)("span",{parentName:"p",className:"math math-inline"},(0,l.yg)("span",{parentName:"span",className:"katex"},(0,l.yg)("span",{parentName:"span",className:"katex-mathml"},(0,l.yg)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,l.yg)("semantics",{parentName:"math"},(0,l.yg)("mrow",{parentName:"semantics"},(0,l.yg)("mn",{parentName:"mrow"},"1")),(0,l.yg)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,l.yg)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,l.yg)("span",{parentName:"span",className:"base"},(0,l.yg)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,l.yg)("span",{parentName:"span",className:"mord"},"1")))))," as maximum value, e.g., ",(0,l.yg)("inlineCode",{parentName:"p"},"yLoa")," for PLR."),(0,l.yg)("admonition",{type:"tip"},(0,l.yg)("ul",{parentName:"admonition"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Prefer ",(0,l.yg)("inlineCode",{parentName:"p"},"ctl")," to ",(0,l.yg)("inlineCode",{parentName:"p"},"con")," for a controller as the latter is too loose: condenser, configuration, etc.")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Prefer ",(0,l.yg)("inlineCode",{parentName:"p"},"cfg")," to ",(0,l.yg)("inlineCode",{parentName:"p"},"con")," for a configuration.")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},"Prefer ",(0,l.yg)("inlineCode",{parentName:"p"},"lck")," to ",(0,l.yg)("inlineCode",{parentName:"p"},"loc")," for lock-out as the latter is too loose: local, etc.")))),(0,l.yg)("h2",{id:"legacy-exceptions"},"Legacy Exceptions"),(0,l.yg)("p",null,"Mainly for consistency with MSL we allow the following variable names."),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"samplePeriod"))))}g.isMDXComponent=!0},3696:(e,a,n)=>{n.d(a,{A:()=>t});const t=n.p+"assets/images/control-16c67947eacdf1229e0d016fc6a9455b.png"}}]);